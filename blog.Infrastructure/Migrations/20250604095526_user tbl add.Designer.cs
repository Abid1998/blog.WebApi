// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blog.Infrastructure.DatabaseContext;

#nullable disable

namespace blog.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604095526_user tbl add")]
    partial class usertbladd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Tutorial", b =>
                {
                    b.Property<int>("tutorial_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tutorial_id"));

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<DateOnly>("created_at")
                        .HasColumnType("date");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<string>("schedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("tutorial_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tutorial_meta")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("tutorial_slug")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("tutorial_title")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("updated_at")
                        .HasColumnType("date");

                    b.Property<int?>("updated_by")
                        .HasColumnType("int");

                    b.HasKey("tutorial_id");

                    b.HasIndex("category_id");

                    b.ToTable("TblTutorial");
                });

            modelBuilder.Entity("blog.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("blog.Core.Entities.Categories", b =>
                {
                    b.Property<int>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("category_id"));

                    b.Property<string>("category_description")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("category_image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_meta")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("category_name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("category_slug")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("category_tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_type")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly>("created_at")
                        .HasColumnType("date");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly?>("updated_at")
                        .HasColumnType("date");

                    b.Property<int?>("updated_by")
                        .HasColumnType("int");

                    b.HasKey("category_id");

                    b.ToTable("TblCategories");
                });

            modelBuilder.Entity("blog.Core.Entities.Comment", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("comment_id"));

                    b.Property<string>("comment_email")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("comment_message")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("comment_name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("comment_phone")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("comment_reply")
                        .HasColumnType("varchar(300)");

                    b.Property<string>("comment_url")
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("created_at")
                        .HasColumnType("date");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("tutorial_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateOnly?>("updated_at")
                        .HasColumnType("date");

                    b.Property<int?>("updated_by")
                        .HasColumnType("int");

                    b.HasKey("comment_id");

                    b.ToTable("TblComment");
                });

            modelBuilder.Entity("blog.Core.Entities.Gallery", b =>
                {
                    b.Property<int>("gallery_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("gallery_id"));

                    b.Property<string>("gallery_img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tutorial_id")
                        .HasColumnType("int");

                    b.HasKey("gallery_id");

                    b.HasIndex("tutorial_id");

                    b.ToTable("TblGallery");
                });

            modelBuilder.Entity("blog.Core.Entities.Tags", b =>
                {
                    b.Property<int>("tag_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tag_id"));

                    b.Property<string>("tag_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tutorial_id")
                        .HasColumnType("int");

                    b.HasKey("tag_id");

                    b.HasIndex("tutorial_id");

                    b.ToTable("TblTags");
                });

            modelBuilder.Entity("blog.Core.Entities.Tutorial_Details", b =>
                {
                    b.Property<int>("tutorial_details_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tutorial_details_id"));

                    b.Property<string>("languages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tutorial_description")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("tutorial_id")
                        .HasColumnType("int");

                    b.HasKey("tutorial_details_id");

                    b.HasIndex("tutorial_id");

                    b.ToTable("TblTutorial_Details");
                });

            modelBuilder.Entity("blog.Core.Entities.WebStory", b =>
                {
                    b.Property<int>("story_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("story_id"));

                    b.Property<string>("cover_image_url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("created_at")
                        .HasColumnType("date");

                    b.Property<int>("created_by")
                        .HasColumnType("int");

                    b.Property<string>("schedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("updated_at")
                        .HasColumnType("date");

                    b.Property<int?>("updated_by")
                        .HasColumnType("int");

                    b.HasKey("story_id");

                    b.ToTable("TblWebStory");
                });

            modelBuilder.Entity("blog.Core.Entities.WebStoryPage", b =>
                {
                    b.Property<int>("page_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("page_id"));

                    b.Property<string>("image_url")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("story_id")
                        .HasColumnType("int");

                    b.Property<string>("text_content")
                        .HasColumnType("text");

                    b.HasKey("page_id");

                    b.HasIndex("story_id");

                    b.ToTable("TblWebStoryPage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("blog.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("blog.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blog.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("blog.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tutorial", b =>
                {
                    b.HasOne("blog.Core.Entities.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("blog.Core.Entities.Gallery", b =>
                {
                    b.HasOne("Tutorial", "Tutorial")
                        .WithMany("galleries")
                        .HasForeignKey("tutorial_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutorial");
                });

            modelBuilder.Entity("blog.Core.Entities.Tags", b =>
                {
                    b.HasOne("Tutorial", "Tutorial")
                        .WithMany("tags")
                        .HasForeignKey("tutorial_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutorial");
                });

            modelBuilder.Entity("blog.Core.Entities.Tutorial_Details", b =>
                {
                    b.HasOne("Tutorial", "Tutorial")
                        .WithMany("TutorialDetails")
                        .HasForeignKey("tutorial_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tutorial");
                });

            modelBuilder.Entity("blog.Core.Entities.WebStoryPage", b =>
                {
                    b.HasOne("blog.Core.Entities.WebStory", "WebStory")
                        .WithMany("Pages")
                        .HasForeignKey("story_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebStory");
                });

            modelBuilder.Entity("Tutorial", b =>
                {
                    b.Navigation("TutorialDetails");

                    b.Navigation("galleries");

                    b.Navigation("tags");
                });

            modelBuilder.Entity("blog.Core.Entities.WebStory", b =>
                {
                    b.Navigation("Pages");
                });
#pragma warning restore 612, 618
        }
    }
}
